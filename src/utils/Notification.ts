import webPush from '../webPush';
import nodemailer from 'nodemailer';
import sgTransport from 'nodemailer-sendgrid-transport';
import { User } from '../../generated/prisma-client';

type NotificationType = 'like' | 'comment' | 'subscription' | 'requestFollow' | 'confirmFollow' | 'newPost';

interface INotificationType {
  like: string,
  comment: string,
  subscription: string,
  requestFollow: string,
  confirmFollow: string,
  newPost: string
}

export interface INotification {
  user: User;
  payload: any;
  type: NotificationType;
  push(): Promise<any>
  email(): void
  sms(): void
}

const APP_ICON: string = `${process.env.CLIENT_URL}/logo192.png`;
const APP_VIBRATE: number[] = [100, 50, 100];

const DICTIONARY: INotificationType = {
  like: '–ø–æ—Å—Ç–∞–≤–∏–ª(-–∞) –≤–∞—à–µ–º—É —Ñ–æ—Ç–æ "–ù—Ä–∞–≤–∏—Ç—Å—è"',
  comment: '–ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª(-–∞) –≤–∞—à–µ —Ñ–æ—Ç–æ',
  subscription: '–ø–æ–¥–ø–∏—Å–∞–ª—Å—è(-—Å—å) –Ω–∞ –≤–∞—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
  requestFollow: '–æ—Ç–ø—Ä–∞–≤–∏–ª(-–∞) –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É',
  confirmFollow: '–ø—Ä–∏–Ω—è–ª(-–∞) –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É',
  newPost: '–æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª(-–∞) –Ω–æ–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é'
}

const ICON: INotificationType = {
  like: '‚ù§Ô∏è',
  comment: 'üìù',
  subscription: 'üë§',
  requestFollow: '‚úâÔ∏è',
  confirmFollow: '‚úÖ',
  newPost: 'üèû'
}

export default class Notification implements INotification {
  user: User;
  payload: any;
  type: NotificationType

  constructor(user, payload, type) {
    this.user = user;
    this.payload = payload;
    this.type = type
  }

  async push(): Promise<void> {
    const { subscriptionEndpoint, username } = this.user;

    if (subscriptionEndpoint) {
      const message = `${DICTIONARY[this.type]} ${this.type === 'comment' ? this.payload.comment : ''}`;
      const endpoint = JSON.parse(subscriptionEndpoint);
      const payload = JSON.stringify({
        title: this.payload.title,
        body: message,
        icon: APP_ICON,
        vibrate: APP_VIBRATE
      });

      try {
        await webPush.sendNotification(endpoint, payload);
      } catch (e) {
        console.error(e);
      }
    } else {
      console.log(`user "${username}" or client not allowed web-push notification`)
    }
  }

  email(): void {
    if (this.user.email) {
      const options = {
        auth: {
          api_user: process.env.SENDGRID_USERNAME,
          api_key: process.env.SENDGRID_PASSWORD
        }
      };
      const client = nodemailer.createTransport(sgTransport(options));
      const email = {
        from: 'push@magergram.com',
        to: this.user.email,
        subject: `${ICON[this.type]} Magergram Notification`,
        html: `${this.payload.title} ${DICTIONARY[this.type]} <br />
               ${this.type === 'comment' ? this.payload.comment : ''}<br />
               –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Magergram<br /><br /><br />
               <a href="${process.env.CLIENT_URL}">–í–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</a>`
      }
      client.sendMail(email);
    } else {
      console.log(`user ${this.user.username} not use email`);
    }
  }

  sms() {}
}
